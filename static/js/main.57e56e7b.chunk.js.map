{"version":3,"sources":["components/button-const-actions.js","components/calc-button.js","components/calculator.js","utils.js","components/calculator-container.js","app.js","serviceWorker.js","index.js"],"names":["BUTTON_COLORS","ACTION_INPUT","ACTION_CLEAR","ACTION_OPERATOR","ACTION_EQUAL","clearButton","mathOpButtons","buttonId","buttonText","buttonAction","calcButtons","CalcButton","_ref","buttonColor","onCalcButtonClick","handleButtonClick","action","payload","react_default","a","createElement","className","Button_default","variant","style","height","fontSize","size","color","onClick","width","margin","padding","display","border","id","prototypes","PropTypes","string","isRequired","func","Calculator","displayValue","Card_default","CardHeader_default","subheader","type","disabled","value","components_calc_button","key","CardContent_default","map","button","getDisplayValue","currentValue","inputValue","length","indexOf","calculateResult","operator","firstValue","secondValue","calc","adjustValueToMaxDisplayLength","add","minus","mul","divide","toString","slice","initialState","waitingForSecondValue","isLastActionEqual","CalculatorContainer","state","handleButtonAction","_this","handleActionInput","setState","Object","objectSpread","handleActionOperator","handleActionEqual","test","Fragment","this","props","render","Component","App","calculator_container","components_calculator","Boolean","window","location","hostname","match","ReactDOM","src_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57e56e7b.chunk.js","sourcesContent":["export const BUTTON_COLORS = {\r\n  DEFAULT: \"default\",\r\n  PRIMARY: \"primary\",\r\n  SECONDARY: \"secondary\"\r\n};\r\n\r\nexport const ACTION_INPUT = \"ACTION_INPUT\";\r\nexport const ACTION_CLEAR = \"ACTION_CLEAR\";\r\nexport const ACTION_OPERATOR = \"ACTION_OPERATOR\";\r\nexport const ACTION_EQUAL = \"ACTION_EQUAL\";\r\n\r\nexport const clearButton = {\r\n  buttonId: \"clear\",\r\n  buttonText: \"AC\",\r\n  buttonAction: ACTION_CLEAR\r\n};\r\n\r\nexport const mathOpButtons = [\r\n  { buttonId: \"divide\", buttonText: \"÷\", buttonAction: ACTION_OPERATOR },\r\n  { buttonId: \"multiply\", buttonText: \"×\", buttonAction: ACTION_OPERATOR },\r\n  { buttonId: \"subtract\", buttonText: \"−\", buttonAction: ACTION_OPERATOR },\r\n  { buttonId: \"add\", buttonText: \"+\", buttonAction: ACTION_OPERATOR }\r\n];\r\n\r\nexport const calcButtons = [\r\n  { buttonId: \"seven\", buttonText: \"7\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"eight\", buttonText: \"8\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"nine\", buttonText: \"9\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"four\", buttonText: \"4\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"five\", buttonText: \"5\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"six\", buttonText: \"6\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"one\", buttonText: \"1\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"two\", buttonText: \"2\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"three\", buttonText: \"3\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"decimal\", buttonText: \".\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"zero\", buttonText: \"0\", buttonAction: ACTION_INPUT },\r\n  { buttonId: \"equals\", buttonText: \"=\", buttonAction: ACTION_EQUAL }\r\n];\r\n\r\nexport const createButtonAction = (action, payload) => ({\r\n  action,\r\n  payload\r\n});\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./calc-button.css\";\r\nimport { createButtonAction } from \"./button-const-actions\";\r\n\r\nconst CalcButton = ({\r\n  buttonText,\r\n  buttonColor,\r\n  buttonId,\r\n  onCalcButtonClick,\r\n  buttonAction\r\n}) => {\r\n  const handleButtonClick = () => {\r\n    onCalcButtonClick(createButtonAction(buttonAction, buttonText));\r\n  };\r\n\r\n  return (\r\n    <div className=\"calc-button\">\r\n      <Button\r\n        variant=\"contained\"\r\n        style={{ height: \"100%\", fontSize: \"1.5rem\" }}\r\n        size=\"large\"\r\n        color={buttonColor}\r\n        onClick={handleButtonClick}\r\n      >\r\n        {buttonText}\r\n      </Button>\r\n      {/* workaround to get fcc tests to pass */}\r\n      <button\r\n        style={{\r\n          height: 0,\r\n          width: 0,\r\n          margin: 0,\r\n          padding: 0,\r\n          fontSize: 0,\r\n          display: \"inline\",\r\n          border: \"white solid 0px\"\r\n        }}\r\n        id={buttonId}\r\n        onClick={handleButtonClick}\r\n      >\r\n        {buttonText}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCalcButton.prototypes = {\r\n  buttonText: PropTypes.string.isRequired,\r\n  buttonColor: PropTypes.string.isRequired,\r\n  buttonId: PropTypes.string.isRequired,\r\n  onCalcButtonClick: PropTypes.func.isRequired,\r\n  buttonAction: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CalcButton;\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CalcButton from \"./calc-button\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport \"./calculator.css\";\r\nimport {\r\n  BUTTON_COLORS,\r\n  clearButton,\r\n  calcButtons,\r\n  mathOpButtons\r\n} from \"./button-const-actions\";\r\n\r\nconst Calculator = ({ displayValue, onCalcButtonClick }) => {\r\n  return (\r\n    <Card style={{ width: 453 }}>\r\n      <CardHeader\r\n        style={{ padding: 0, width: \"100%\" }}\r\n        subheader={\r\n          <div className=\"header-row\">\r\n            <input\r\n              id=\"display\"\r\n              type=\"text\"\r\n              disabled\r\n              className=\"textarea\"\r\n              value={displayValue}\r\n            />\r\n            <CalcButton\r\n              buttonText={clearButton.buttonText}\r\n              buttonColor={BUTTON_COLORS.SECONDARY}\r\n              buttonId={clearButton.buttonId}\r\n              key={clearButton.buttonId}\r\n              buttonAction={clearButton.buttonAction}\r\n              onCalcButtonClick={onCalcButtonClick}\r\n            />\r\n          </div>\r\n        }\r\n      />\r\n      <CardContent style={{ padding: 0, display: \"flex\" }}>\r\n        <div className=\"calc-buttons-area\">\r\n          {calcButtons.map(button => (\r\n            <CalcButton\r\n              buttonText={button.buttonText}\r\n              buttonColor={BUTTON_COLORS.DEFAULT}\r\n              buttonId={button.buttonId}\r\n              key={button.buttonId}\r\n              buttonAction={button.buttonAction}\r\n              onCalcButtonClick={onCalcButtonClick}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"calc-buttons-area\">\r\n          {mathOpButtons.map(button => (\r\n            <CalcButton\r\n              buttonText={button.buttonText}\r\n              buttonColor={BUTTON_COLORS.PRIMARY}\r\n              buttonId={button.buttonId}\r\n              key={button.buttonId}\r\n              buttonAction={button.buttonAction}\r\n              onCalcButtonClick={onCalcButtonClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nCalculator.propTypes = {\r\n  displayValue: PropTypes.string.isRequired,\r\n  onCalcButtonClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Calculator;\r\n","import { Calculator } from \"simplecalculatorjs\";\r\n\r\nexport const getDisplayValue = (currentValue, inputValue) => {\r\n  if (currentValue.length === 18) return currentValue; // Max digits\r\n\r\n  if (currentValue === \"0\") {\r\n    if (inputValue === \".\") {\r\n      return currentValue + inputValue;\r\n    } else {\r\n      return inputValue;\r\n    }\r\n  } else {\r\n    if (inputValue === \".\") {\r\n      if (~currentValue.indexOf(inputValue)) {\r\n        return currentValue;\r\n      } else if (currentValue === \"\") {\r\n        return \"0\" + inputValue;\r\n      } else {\r\n        return currentValue + inputValue;\r\n      }\r\n    } else {\r\n      return currentValue + inputValue;\r\n    }\r\n  }\r\n};\r\n\r\nexport const calculateResult = (operator, firstValue, secondValue) => {\r\n  const calc = new Calculator(firstValue, secondValue);\r\n  switch (operator) {\r\n    case \"+\":\r\n      return adjustValueToMaxDisplayLength(calc.add());\r\n    case \"−\":\r\n      return adjustValueToMaxDisplayLength(calc.minus());\r\n    case \"×\":\r\n      return adjustValueToMaxDisplayLength(calc.mul());\r\n    case \"÷\":\r\n      return adjustValueToMaxDisplayLength(calc.divide());\r\n    default:\r\n      return \"0\";\r\n  }\r\n};\r\n\r\nconst adjustValueToMaxDisplayLength = value => {\r\n  return value.toString().slice(0, 18);\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  ACTION_INPUT,\r\n  ACTION_CLEAR,\r\n  ACTION_OPERATOR,\r\n  ACTION_EQUAL\r\n} from \"./button-const-actions\";\r\nimport { getDisplayValue, calculateResult } from \"../utils\";\r\n\r\nconst initialState = {\r\n  displayValue: \"0\",\r\n  firstValue: null,\r\n  waitingForSecondValue: false,\r\n  operator: null,\r\n  isLastActionEqual: false\r\n};\r\n\r\nclass CalculatorContainer extends Component {\r\n  static propTypes = {\r\n    render: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = { ...initialState };\r\n\r\n  handleButtonAction = ({ action, payload }) => {\r\n    switch (action) {\r\n      case ACTION_INPUT:\r\n        this.handleActionInput(payload);\r\n        break;\r\n      case ACTION_CLEAR:\r\n        this.setState({ ...initialState });\r\n        break;\r\n      case ACTION_OPERATOR:\r\n        this.handleActionOperator(payload);\r\n        break;\r\n      case ACTION_EQUAL:\r\n        this.handleActionEqual();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  handleActionInput = inputValue => {\r\n    if (!this.state.isLastActionEqual) {\r\n      if (!/[÷|×|−|+]/g.test(this.state.displayValue)) {\r\n        this.setState({\r\n          displayValue: getDisplayValue(this.state.displayValue, inputValue)\r\n        });\r\n      } else {\r\n        this.setState({\r\n          displayValue: getDisplayValue(\"\", inputValue),\r\n          waitingForSecondValue: false\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        displayValue: getDisplayValue(\"\", inputValue),\r\n        isLastActionEqual: false\r\n      });\r\n    }\r\n  };\r\n\r\n  handleActionOperator = operator => {\r\n    if (\r\n      !this.state.waitingForSecondValue &&\r\n      this.state.firstValue !== null &&\r\n      this.state.operator !== null\r\n    ) {\r\n      this.setState({\r\n        waitingForSecondValue: true,\r\n        displayValue: operator,\r\n        firstValue: calculateResult(\r\n          this.state.operator,\r\n          this.state.firstValue,\r\n          this.state.displayValue\r\n        ),\r\n        isLastActionEqual: false,\r\n        operator\r\n      });\r\n    } else if (!this.state.waitingForSecondValue) {\r\n      this.setState({\r\n        waitingForSecondValue: true,\r\n        firstValue: this.state.displayValue,\r\n        displayValue: operator,\r\n        operator,\r\n        isLastActionEqual: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        displayValue: operator,\r\n        operator,\r\n        isLastActionEqual: false\r\n      });\r\n    }\r\n  };\r\n\r\n  handleActionEqual = () => {\r\n    if (\r\n      !this.state.waitingForSecondValue &&\r\n      this.state.firstValue !== null &&\r\n      this.state.operator !== null\r\n    ) {\r\n      this.setState({\r\n        displayValue: calculateResult(\r\n          this.state.operator,\r\n          this.state.firstValue,\r\n          this.state.displayValue\r\n        ),\r\n        firstValue: null,\r\n        isLastActionEqual: true,\r\n        operator: null\r\n      });\r\n    } else {\r\n      if (this.state.waitingForSecondValue) {\r\n        this.setState({\r\n          displayValue: this.state.firstValue,\r\n          firstValue: null,\r\n          isLastActionEqual: true,\r\n          operator: null,\r\n          waitingForSecondValue: false\r\n        });\r\n      } else {\r\n        this.setState({\r\n          firstValue: this.state.displayValue,\r\n          displayValue: this.state.displayValue,\r\n          isLastActionEqual: true\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.render(this.state.displayValue, this.handleButtonAction)}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalculatorContainer;\r\n","import React, { Component } from \"react\";\r\nimport \"./app.css\";\r\nimport Calculator from \"./components/calculator\";\r\nimport CalculatorContainer from \"./components/calculator-container\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <CalculatorContainer\r\n          render={(displayValue, onCalcButtonClick) => (\r\n            <Calculator\r\n              displayValue={displayValue}\r\n              onCalcButtonClick={onCalcButtonClick}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}